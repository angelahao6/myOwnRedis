#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <errno.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/ip.h>
#include <assert.h>
#include <vector>
#include <fcntl.h>
#include <poll.h>

const size_t k_max_msg = 32 << 20;

struct Conn
{
    int fd = -1;
    // application's intention, for the event loop
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;
    // buffered input and output
    std::vector<uint8_t> incoming; // data to be parsed by the application
    std::vector<uint8_t> outgoing; // responses generated by the application
};

struct Buffer
{
    uint8_t *buffer_begin;
    uint8_t *buffer_end;
    uint8_t *data_begin;
    uint8_t *data_end;
};

static void init_buf(Buffer *buf, size_t n)
{
    buf->buffer_begin = (uint8_t *)malloc(n);
    buf->buffer_end = buf->buffer_begin + n;
    buf->data_begin = buf->buffer_begin;
    buf->data_end = buf->buffer_begin;
}

static void free_buf(Buffer *buf)
{
    free(buf->buffer_begin);
    buf->buffer_begin = buf->buffer_end = buf->data_begin = buf->data_end = NULL;
}

static size_t buf_size(Buffer *buf)
{
    return buf->data_end - buf->data_begin;
}

static size_t buf_space(Buffer *buf)
{
    return buf->buffer_end - buf->data_end;
}

static void msg(const char *msg)
{
    fprintf(stderr, "%s\n", msg);
}

static void die(const char *msg)
{
    int err = errno;
    fprintf(stderr, "[%d] %s\n", err, msg);
    abort();
}

static void fd_set_nb(int fd)
{
    fcntl(fd, F_SETFL, fcntl(fd, F_GETFL, 0) | O_NONBLOCK);
}

static void buf_append(std::vector<uint8_t> &buf, const uint8_t *data, size_t len)
{
    buf.insert(buf.end(), data, data + len);
}

static void buf_consume(std::vector<uint8_t> &buf, size_t n)
{
    buf.erase(buf.begin(), buf.begin() + n);
}

// todo: update buf_consume
// static void buf_consume(struct Buffer *buf, size_t n)
// {
//     buf->data_begin += n;
// }

// process 1 request if there is enough data
static bool try_one_request(Conn *conn)
{
    // 3. Try to parse the accumulated buffer.
    // Protocol: message header
    if (conn->incoming.size() < 4)
    {
        return false; // want read
    }
    uint32_t len = 0;
    memcpy(&len, conn->incoming.data(), 4);
    if (len > k_max_msg)
    { // protocol error
        conn->want_close = true;
        return false; // want close
    }
    // Protocol: message body
    if (4 + len > conn->incoming.size())
    {
        return false; // want read
    }
    const uint8_t *request = &conn->incoming[4];
    // 4. Process the parsed message.
    printf("client says: len:%d data:%.*s\n",
           len, len < 100 ? len : 100, request);
    // generate the response (echo)
    buf_append(conn->outgoing, (const uint8_t *)&len, 4);
    buf_append(conn->outgoing, request, len);
    // 5. Remove the message from `Conn::incoming`.
    buf_consume(conn->incoming, 4 + len);
    return true; // success
}

static Conn *handle_accept(int fd)
{
    struct sockaddr_in client_addr = {};
    socklen_t addrlen = sizeof(client_addr);
    int connfd = accept(fd, (struct sockaddr *)&client_addr, &addrlen);
    if (connfd < 0)
    {
        return NULL;
    }
    fd_set_nb(connfd);

    Conn *conn = new Conn();
    conn->fd = connfd;
    conn->want_read = true;
    return conn;
}

static void handle_write(Conn *conn)
{
    assert(conn->outgoing.size() > 0);
    ssize_t rv = write(conn->fd, conn->outgoing.data(), conn->outgoing.size());
    // Check if the socket is ready for writing
    if (rv < 0 && errno == EAGAIN)
    {
        return;
    }
    if (rv < 0)
    {
        conn->want_close = true; // error handling
        return;
    }
    // remove written data from `outgoing`
    buf_consume(conn->outgoing, (size_t)rv);

    if (conn->outgoing.size() == 0)
    { // all data written
        conn->want_read = true;
        conn->want_write = false;
    }
    else
    {
        conn->want_read = false;
        conn->want_write = true;
    }
}

static void handle_read(Conn *conn)
{
    // perform a nonblocking read
    uint8_t buf[64 * 1024];
    ssize_t rv = read(conn->fd, buf, sizeof(buf));
    if (rv < 0 && errno == EAGAIN)
    {
        return;
    }
    if (rv <= 0)
    {
        msg(rv == 0 ? "client closed" : "read() error");
        conn->want_close = true;
        return;
    }
    // add data to the incoming buffer
    buf_append(conn->incoming, buf, (size_t)rv);
    // try to parse the accumulated buffer and Remove the message from `Conn::incoming`.
    // need to call in a loop to handle pipelining where we can handle multiple requests
    while (try_one_request(conn))
    {
    }
    if (conn->outgoing.size() > 0)
    {
        conn->want_read = false;
        conn->want_write = true;
        return handle_write(conn);
    }
    else
    {
        conn->want_read = true;
        conn->want_write = false;
    }
}

int main()
{
    // obtain socket handle
    int fd = socket(AF_INET, SOCK_STREAM, 0);
    if (fd < 0)
    {
        die("socket()");
    }

    // set socket options
    int val = 1; // set SO_REUSEADDR to 1 to bind immediately after port closes
    setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val));

    // bind to the wildcard address 0.0.0.0.1234
    struct sockaddr_in addr = {};
    addr.sin_family = AF_INET;
    addr.sin_port = htons(1234);     // port
    addr.sin_addr.s_addr = htonl(0); // wildcard IP 0.0.0.0
    int rv = bind(fd, (const struct sockaddr *)&addr, sizeof(addr));
    if (rv)
    {
        die("bind()");
    }

    // set the fd to nonblocking mode
    fd_set_nb(fd);

    // listen -- this is where socket is actually created
    rv = listen(fd, SOMAXCONN); // SOMAXCONN = size of queue (is 4096 on linux)
    if (rv)
    {
        die("listen()");
    }

    std::vector<Conn *> fd2conn;
    std::vector<struct pollfd> poll_args;

    while (true)
    {
        // set up arguments for poll()
        poll_args.clear();
        // put the listening sockets in the first position
        struct pollfd pfd = {fd, POLLIN, 0};
        poll_args.push_back(pfd);

        for (Conn *conn : fd2conn)
        {
            if (!conn)
            {
                continue;
            }

            struct pollfd pfd = {conn->fd, POLLERR, 0};
            if (conn->want_read)
            {
                pfd.events |= POLLIN;
            }
            if (conn->want_write)
            {
                pfd.events |= POLLOUT;
            }
            poll_args.push_back(pfd);
        }

        // call poll()
        int rv = poll(poll_args.data(), (nfds_t)poll_args.size(), -1);
        if (rv < 0 && errno == EINTR)
        {
            continue; // signal got interrupted so is not an error; try again
        }
        if (rv < 0)
        {
            die("poll");
        }

        // accept new connections
        if (poll_args[0].revents)
        {
            if (Conn *conn = handle_accept(fd))
            {
                if (fd2conn.size() <= (size_t)conn->fd)
                {
                    fd2conn.resize(conn->fd + 1);
                }
                fd2conn[conn->fd] = conn;
            }
        }

        // if a connection socket is ready, call the logic
        for (size_t i = 1; i < poll_args.size(); ++i)
        {
            uint32_t ready = poll_args[i].revents;
            if (ready == 0)
            {
                continue;
            }

            Conn *conn = fd2conn[poll_args[i].fd];
            if (ready & POLLIN)
            {
                assert(conn->want_read);
                handle_read(conn);
            }
            if (ready & POLLOUT)
            {
                assert(conn->want_write);
                handle_write(conn);
            }
            // close the connections
            if (ready & POLLERR || conn->want_close)
            {
                (void)close(conn->fd);
                fd2conn[conn->fd] = NULL;
                delete conn;
            }
        }
    }
    return 0;
}
